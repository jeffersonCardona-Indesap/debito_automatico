import { FederationHost, UserOptions } from '@module-federation/runtime-core';
export type ManifestFile<T extends RemoteConfig = RemoteConfig> = {
    [key: string]: string | T;
};
export type Manifest<T extends RemoteConfig = RemoteConfig> = {
    [key: string]: T;
};
export type RemoteConfig = {
    name: string;
    type: 'module' | 'script';
    remoteEntry: string;
    [key: string]: unknown;
} | {
    name: string;
    type: 'module' | 'script';
    entry: string;
    [key: string]: unknown;
};
export type InitFederationOptions = {
    runtimeOptions?: UserOptions;
};
export declare function initFederation(manifest: string | ManifestFile, options?: InitFederationOptions): Promise<FederationHost>;
export declare function toRuntimeConfig(config: Manifest<RemoteConfig>, options?: InitFederationOptions): UserOptions;
export declare function getManifest<T extends Manifest>(): T;
export declare function setManifest(manifest: ManifestFile): Promise<void>;
export declare function loadManifest<T extends Manifest = Manifest>(configFile: string): Promise<T>;
export declare function parseConfig(config: ManifestFile): Manifest;
