import { init } from '@module-federation/enhanced/runtime';
let config = {};
export async function initFederation(manifest, options) {
    if (typeof manifest === 'string') {
        config = await loadManifest(manifest);
    }
    else {
        config = parseConfig(manifest);
    }
    const runtimeConfig = toRuntimeConfig(config, options);
    return init(runtimeConfig);
}
export function toRuntimeConfig(config, options) {
    return {
        //
        // The runtime assumes an empty string as the name for
        // the host. Alternatively, we have to pass the same
        // name to withFederation (compile time config) and
        // initFederation (runtime time config on app start)
        //
        name: '',
        ...options?.runtimeOptions,
        remotes: [
            ...(options?.runtimeOptions?.remotes ?? []),
            ...toRemotes(config),
        ],
    };
}
function toRemotes(config) {
    return Object.values(config).map((c) => ({
        name: c.name,
        entry: (c.entry ?? c.remoteEntry ?? ''),
        type: c.type,
    }));
}
export function getManifest() {
    return config;
}
//  Just needed to align with original webpack-based plugin
export async function setManifest(manifest) {
    config = parseConfig(manifest);
}
export async function loadManifest(configFile) {
    const result = await fetch(configFile);
    if (!result.ok) {
        throw Error('could not load configFile: ' + configFile);
    }
    config = parseConfig(await result.json());
    return config;
}
export function parseConfig(config) {
    const result = {};
    for (const key in config) {
        const value = config[key];
        let entry;
        if (typeof value === 'string') {
            entry = {
                name: key,
                remoteEntry: value,
                type: 'module',
            };
        }
        else {
            entry = {
                ...value,
                name: key,
                type: value.type || 'module',
            };
        }
        result[key] = entry;
    }
    return result;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5pdC1mZWRlcmF0aW9uLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vbGlicy9tZi1ydW50aW1lL2VuaGFuY2VkL3NyYy9saWIvaW5pdC1mZWRlcmF0aW9uLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxJQUFJLEVBQUUsTUFBTSxxQ0FBcUMsQ0FBQztBQW1DM0QsSUFBSSxNQUFNLEdBQWEsRUFBRSxDQUFDO0FBRTFCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsY0FBYyxDQUNsQyxRQUErQixFQUMvQixPQUErQjtJQUUvQixJQUFJLE9BQU8sUUFBUSxLQUFLLFFBQVEsRUFBRSxDQUFDO1FBQ2pDLE1BQU0sR0FBRyxNQUFNLFlBQVksQ0FBQyxRQUFRLENBQUMsQ0FBQztJQUN4QyxDQUFDO1NBQU0sQ0FBQztRQUNOLE1BQU0sR0FBRyxXQUFXLENBQUMsUUFBUSxDQUFDLENBQUM7SUFDakMsQ0FBQztJQUVELE1BQU0sYUFBYSxHQUFHLGVBQWUsQ0FBQyxNQUFNLEVBQUUsT0FBTyxDQUFDLENBQUM7SUFDdkQsT0FBTyxJQUFJLENBQUMsYUFBYSxDQUFDLENBQUM7QUFDN0IsQ0FBQztBQUVELE1BQU0sVUFBVSxlQUFlLENBQzdCLE1BQThCLEVBQzlCLE9BQStCO0lBRS9CLE9BQU87UUFDTCxFQUFFO1FBQ0Ysc0RBQXNEO1FBQ3RELG9EQUFvRDtRQUNwRCxtREFBbUQ7UUFDbkQsb0RBQW9EO1FBQ3BELEVBQUU7UUFDRixJQUFJLEVBQUUsRUFBRTtRQUNSLEdBQUcsT0FBTyxFQUFFLGNBQWM7UUFDMUIsT0FBTyxFQUFFO1lBQ1AsR0FBRyxDQUFDLE9BQU8sRUFBRSxjQUFjLEVBQUUsT0FBTyxJQUFJLEVBQUUsQ0FBQztZQUMzQyxHQUFHLFNBQVMsQ0FBQyxNQUFNLENBQUM7U0FDckI7S0FDRixDQUFDO0FBQ0osQ0FBQztBQUVELFNBQVMsU0FBUyxDQUFDLE1BQWdCO0lBQ2pDLE9BQU8sTUFBTSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUM7UUFDdkMsSUFBSSxFQUFFLENBQUMsQ0FBQyxJQUFJO1FBQ1osS0FBSyxFQUFFLENBQUMsQ0FBQyxDQUFDLEtBQUssSUFBSSxDQUFDLENBQUMsV0FBVyxJQUFJLEVBQUUsQ0FBVztRQUNqRCxJQUFJLEVBQUUsQ0FBQyxDQUFDLElBQUk7S0FDYixDQUFDLENBQUMsQ0FBQztBQUNOLENBQUM7QUFFRCxNQUFNLFVBQVUsV0FBVztJQUN6QixPQUFPLE1BQVcsQ0FBQztBQUNyQixDQUFDO0FBRUQsMkRBQTJEO0FBQzNELE1BQU0sQ0FBQyxLQUFLLFVBQVUsV0FBVyxDQUFDLFFBQXNCO0lBQ3RELE1BQU0sR0FBRyxXQUFXLENBQUMsUUFBUSxDQUFDLENBQUM7QUFDakMsQ0FBQztBQUVELE1BQU0sQ0FBQyxLQUFLLFVBQVUsWUFBWSxDQUNoQyxVQUFrQjtJQUVsQixNQUFNLE1BQU0sR0FBRyxNQUFNLEtBQUssQ0FBQyxVQUFVLENBQUMsQ0FBQztJQUV2QyxJQUFJLENBQUMsTUFBTSxDQUFDLEVBQUUsRUFBRSxDQUFDO1FBQ2YsTUFBTSxLQUFLLENBQUMsNkJBQTZCLEdBQUcsVUFBVSxDQUFDLENBQUM7SUFDMUQsQ0FBQztJQUVELE1BQU0sR0FBRyxXQUFXLENBQUMsTUFBTSxNQUFNLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQztJQUMxQyxPQUFPLE1BQVcsQ0FBQztBQUNyQixDQUFDO0FBRUQsTUFBTSxVQUFVLFdBQVcsQ0FBQyxNQUFvQjtJQUM5QyxNQUFNLE1BQU0sR0FBYSxFQUFFLENBQUM7SUFDNUIsS0FBSyxNQUFNLEdBQUcsSUFBSSxNQUFNLEVBQUUsQ0FBQztRQUN6QixNQUFNLEtBQUssR0FBRyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUM7UUFFMUIsSUFBSSxLQUFtQixDQUFDO1FBQ3hCLElBQUksT0FBTyxLQUFLLEtBQUssUUFBUSxFQUFFLENBQUM7WUFDOUIsS0FBSyxHQUFHO2dCQUNOLElBQUksRUFBRSxHQUFHO2dCQUNULFdBQVcsRUFBRSxLQUFLO2dCQUNsQixJQUFJLEVBQUUsUUFBUTthQUNmLENBQUM7UUFDSixDQUFDO2FBQU0sQ0FBQztZQUNOLEtBQUssR0FBRztnQkFDTixHQUFHLEtBQUs7Z0JBQ1IsSUFBSSxFQUFFLEdBQUc7Z0JBQ1QsSUFBSSxFQUFFLEtBQUssQ0FBQyxJQUFJLElBQUksUUFBUTthQUM3QixDQUFDO1FBQ0osQ0FBQztRQUVELE1BQU0sQ0FBQyxHQUFHLENBQUMsR0FBRyxLQUFLLENBQUM7SUFDdEIsQ0FBQztJQUNELE9BQU8sTUFBTSxDQUFDO0FBQ2hCLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBpbml0IH0gZnJvbSAnQG1vZHVsZS1mZWRlcmF0aW9uL2VuaGFuY2VkL3J1bnRpbWUnO1xuaW1wb3J0IHsgRmVkZXJhdGlvbkhvc3QsIFVzZXJPcHRpb25zIH0gZnJvbSAnQG1vZHVsZS1mZWRlcmF0aW9uL3J1bnRpbWUtY29yZSc7XG5cbmV4cG9ydCB0eXBlIE1hbmlmZXN0RmlsZTxUIGV4dGVuZHMgUmVtb3RlQ29uZmlnID0gUmVtb3RlQ29uZmlnPiA9IHtcbiAgW2tleTogc3RyaW5nXTogc3RyaW5nIHwgVDtcbn07XG5cbmV4cG9ydCB0eXBlIE1hbmlmZXN0PFQgZXh0ZW5kcyBSZW1vdGVDb25maWcgPSBSZW1vdGVDb25maWc+ID0ge1xuICBba2V5OiBzdHJpbmddOiBUO1xufTtcblxuLy9cbi8vIHJlbW90ZUVudHJ5IGlzIHRoZSBvcmlnaW5hbCB1c2VkIGJ5IHRoZSBvcmlnbmFsXG4vLyB3ZWJwYWNrLWJhc2VkIHBsdWdpbjsgZW50cnkgaXMgdXNlZCBieSB0aGUgbmV3XG4vLyBNb2R1bGUgRmVkZXJhdGlvbiBSdW50aW1lLiBXZSBzdXBwb3J0IGJvdGggdG9cbi8vIGF2b2lkIGNvbmZ1c2lvbi5cbi8vXG5leHBvcnQgdHlwZSBSZW1vdGVDb25maWcgPVxuICB8IHtcbiAgICAgIG5hbWU6IHN0cmluZztcbiAgICAgIHR5cGU6ICdtb2R1bGUnIHwgJ3NjcmlwdCc7XG4gICAgICByZW1vdGVFbnRyeTogc3RyaW5nO1xuICAgICAgW2tleTogc3RyaW5nXTogdW5rbm93bjtcbiAgICB9XG4gIHwge1xuICAgICAgbmFtZTogc3RyaW5nO1xuICAgICAgdHlwZTogJ21vZHVsZScgfCAnc2NyaXB0JztcbiAgICAgIGVudHJ5OiBzdHJpbmc7XG4gICAgICBba2V5OiBzdHJpbmddOiB1bmtub3duO1xuICAgIH07XG5cbmV4cG9ydCB0eXBlIEluaXRGZWRlcmF0aW9uT3B0aW9ucyA9IHtcbiAgcnVudGltZU9wdGlvbnM/OiBVc2VyT3B0aW9ucztcbn07XG5cbmxldCBjb25maWc6IE1hbmlmZXN0ID0ge307XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBpbml0RmVkZXJhdGlvbihcbiAgbWFuaWZlc3Q6IHN0cmluZyB8IE1hbmlmZXN0RmlsZSxcbiAgb3B0aW9ucz86IEluaXRGZWRlcmF0aW9uT3B0aW9uc1xuKTogUHJvbWlzZTxGZWRlcmF0aW9uSG9zdD4ge1xuICBpZiAodHlwZW9mIG1hbmlmZXN0ID09PSAnc3RyaW5nJykge1xuICAgIGNvbmZpZyA9IGF3YWl0IGxvYWRNYW5pZmVzdChtYW5pZmVzdCk7XG4gIH0gZWxzZSB7XG4gICAgY29uZmlnID0gcGFyc2VDb25maWcobWFuaWZlc3QpO1xuICB9XG5cbiAgY29uc3QgcnVudGltZUNvbmZpZyA9IHRvUnVudGltZUNvbmZpZyhjb25maWcsIG9wdGlvbnMpO1xuICByZXR1cm4gaW5pdChydW50aW1lQ29uZmlnKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHRvUnVudGltZUNvbmZpZyhcbiAgY29uZmlnOiBNYW5pZmVzdDxSZW1vdGVDb25maWc+LFxuICBvcHRpb25zPzogSW5pdEZlZGVyYXRpb25PcHRpb25zXG4pOiBVc2VyT3B0aW9ucyB7XG4gIHJldHVybiB7XG4gICAgLy9cbiAgICAvLyBUaGUgcnVudGltZSBhc3N1bWVzIGFuIGVtcHR5IHN0cmluZyBhcyB0aGUgbmFtZSBmb3JcbiAgICAvLyB0aGUgaG9zdC4gQWx0ZXJuYXRpdmVseSwgd2UgaGF2ZSB0byBwYXNzIHRoZSBzYW1lXG4gICAgLy8gbmFtZSB0byB3aXRoRmVkZXJhdGlvbiAoY29tcGlsZSB0aW1lIGNvbmZpZykgYW5kXG4gICAgLy8gaW5pdEZlZGVyYXRpb24gKHJ1bnRpbWUgdGltZSBjb25maWcgb24gYXBwIHN0YXJ0KVxuICAgIC8vXG4gICAgbmFtZTogJycsXG4gICAgLi4ub3B0aW9ucz8ucnVudGltZU9wdGlvbnMsXG4gICAgcmVtb3RlczogW1xuICAgICAgLi4uKG9wdGlvbnM/LnJ1bnRpbWVPcHRpb25zPy5yZW1vdGVzID8/IFtdKSxcbiAgICAgIC4uLnRvUmVtb3Rlcyhjb25maWcpLFxuICAgIF0sXG4gIH07XG59XG5cbmZ1bmN0aW9uIHRvUmVtb3Rlcyhjb25maWc6IE1hbmlmZXN0KSB7XG4gIHJldHVybiBPYmplY3QudmFsdWVzKGNvbmZpZykubWFwKChjKSA9PiAoe1xuICAgIG5hbWU6IGMubmFtZSxcbiAgICBlbnRyeTogKGMuZW50cnkgPz8gYy5yZW1vdGVFbnRyeSA/PyAnJykgYXMgc3RyaW5nLFxuICAgIHR5cGU6IGMudHlwZSxcbiAgfSkpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0TWFuaWZlc3Q8VCBleHRlbmRzIE1hbmlmZXN0PigpOiBUIHtcbiAgcmV0dXJuIGNvbmZpZyBhcyBUO1xufVxuXG4vLyAgSnVzdCBuZWVkZWQgdG8gYWxpZ24gd2l0aCBvcmlnaW5hbCB3ZWJwYWNrLWJhc2VkIHBsdWdpblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIHNldE1hbmlmZXN0KG1hbmlmZXN0OiBNYW5pZmVzdEZpbGUpIHtcbiAgY29uZmlnID0gcGFyc2VDb25maWcobWFuaWZlc3QpO1xufVxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbG9hZE1hbmlmZXN0PFQgZXh0ZW5kcyBNYW5pZmVzdCA9IE1hbmlmZXN0PihcbiAgY29uZmlnRmlsZTogc3RyaW5nXG4pOiBQcm9taXNlPFQ+IHtcbiAgY29uc3QgcmVzdWx0ID0gYXdhaXQgZmV0Y2goY29uZmlnRmlsZSk7XG5cbiAgaWYgKCFyZXN1bHQub2spIHtcbiAgICB0aHJvdyBFcnJvcignY291bGQgbm90IGxvYWQgY29uZmlnRmlsZTogJyArIGNvbmZpZ0ZpbGUpO1xuICB9XG5cbiAgY29uZmlnID0gcGFyc2VDb25maWcoYXdhaXQgcmVzdWx0Lmpzb24oKSk7XG4gIHJldHVybiBjb25maWcgYXMgVDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHBhcnNlQ29uZmlnKGNvbmZpZzogTWFuaWZlc3RGaWxlKTogTWFuaWZlc3Qge1xuICBjb25zdCByZXN1bHQ6IE1hbmlmZXN0ID0ge307XG4gIGZvciAoY29uc3Qga2V5IGluIGNvbmZpZykge1xuICAgIGNvbnN0IHZhbHVlID0gY29uZmlnW2tleV07XG5cbiAgICBsZXQgZW50cnk6IFJlbW90ZUNvbmZpZztcbiAgICBpZiAodHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJykge1xuICAgICAgZW50cnkgPSB7XG4gICAgICAgIG5hbWU6IGtleSxcbiAgICAgICAgcmVtb3RlRW50cnk6IHZhbHVlLFxuICAgICAgICB0eXBlOiAnbW9kdWxlJyxcbiAgICAgIH07XG4gICAgfSBlbHNlIHtcbiAgICAgIGVudHJ5ID0ge1xuICAgICAgICAuLi52YWx1ZSxcbiAgICAgICAgbmFtZToga2V5LFxuICAgICAgICB0eXBlOiB2YWx1ZS50eXBlIHx8ICdtb2R1bGUnLFxuICAgICAgfTtcbiAgICB9XG5cbiAgICByZXN1bHRba2V5XSA9IGVudHJ5O1xuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG4iXX0=