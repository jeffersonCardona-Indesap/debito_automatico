/* eslint-disable @typescript-eslint/no-explicit-any */
import { loadRemote } from '@module-federation/enhanced/runtime';
export async function loadRemoteModule(optionsOrRemoteName, exposedModule) {
    const options = normalize(optionsOrRemoteName, exposedModule);
    const remote = options.remoteName;
    const exposed = normalizeExposed(options.exposedModule);
    const url = [remote, exposed].join('/');
    let result = null;
    let error;
    try {
        result = await loadRemote(url);
    }
    catch (e) {
        error = e;
    }
    if (!error && result) {
        return result;
    }
    if (options.fallback) {
        return options.fallback;
    }
    if (error) {
        throw error;
    }
    throw new Error('could not load ' + url);
}
function normalize(optionsOrRemoteName, exposedModule) {
    if (typeof optionsOrRemoteName === 'string') {
        return {
            remoteName: optionsOrRemoteName,
            exposedModule: exposedModule ?? '',
        };
    }
    else {
        return optionsOrRemoteName;
    }
}
function normalizeExposed(exposed) {
    if (exposed.startsWith('./')) {
        return exposed.substring(2);
    }
    return exposed;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibG9hZFJlbW90ZU1vZHVsZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL2xpYnMvbWYtcnVudGltZS9lbmhhbmNlZC9zcmMvbGliL2xvYWRSZW1vdGVNb2R1bGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsdURBQXVEO0FBQ3ZELE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxxQ0FBcUMsQ0FBQztBQWVqRSxNQUFNLENBQUMsS0FBSyxVQUFVLGdCQUFnQixDQUNwQyxtQkFBd0QsRUFDeEQsYUFBc0I7SUFFdEIsTUFBTSxPQUFPLEdBQUcsU0FBUyxDQUFDLG1CQUFtQixFQUFFLGFBQWEsQ0FBQyxDQUFDO0lBRTlELE1BQU0sTUFBTSxHQUFHLE9BQU8sQ0FBQyxVQUFVLENBQUM7SUFDbEMsTUFBTSxPQUFPLEdBQUcsZ0JBQWdCLENBQUMsT0FBTyxDQUFDLGFBQWEsQ0FBQyxDQUFDO0lBRXhELE1BQU0sR0FBRyxHQUFHLENBQUMsTUFBTSxFQUFFLE9BQU8sQ0FBQyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUV4QyxJQUFJLE1BQU0sR0FBYSxJQUFJLENBQUM7SUFDNUIsSUFBSSxLQUFjLENBQUM7SUFFbkIsSUFBSSxDQUFDO1FBQ0gsTUFBTSxHQUFHLE1BQU0sVUFBVSxDQUFJLEdBQUcsQ0FBQyxDQUFDO0lBQ3BDLENBQUM7SUFBQyxPQUFPLENBQUMsRUFBRSxDQUFDO1FBQ1gsS0FBSyxHQUFHLENBQUMsQ0FBQztJQUNaLENBQUM7SUFFRCxJQUFJLENBQUMsS0FBSyxJQUFJLE1BQU0sRUFBRSxDQUFDO1FBQ3JCLE9BQU8sTUFBTSxDQUFDO0lBQ2hCLENBQUM7SUFFRCxJQUFJLE9BQU8sQ0FBQyxRQUFRLEVBQUUsQ0FBQztRQUNyQixPQUFPLE9BQU8sQ0FBQyxRQUFRLENBQUM7SUFDMUIsQ0FBQztJQUVELElBQUksS0FBSyxFQUFFLENBQUM7UUFDVixNQUFNLEtBQUssQ0FBQztJQUNkLENBQUM7SUFFRCxNQUFNLElBQUksS0FBSyxDQUFDLGlCQUFpQixHQUFHLEdBQUcsQ0FBQyxDQUFDO0FBQzNDLENBQUM7QUFFRCxTQUFTLFNBQVMsQ0FDaEIsbUJBQXdELEVBQ3hELGFBQXNCO0lBRXRCLElBQUksT0FBTyxtQkFBbUIsS0FBSyxRQUFRLEVBQUUsQ0FBQztRQUM1QyxPQUFPO1lBQ0wsVUFBVSxFQUFFLG1CQUFtQjtZQUMvQixhQUFhLEVBQUUsYUFBYSxJQUFJLEVBQUU7U0FDbkMsQ0FBQztJQUNKLENBQUM7U0FBTSxDQUFDO1FBQ04sT0FBTyxtQkFBbUIsQ0FBQztJQUM3QixDQUFDO0FBQ0gsQ0FBQztBQUVELFNBQVMsZ0JBQWdCLENBQUMsT0FBZTtJQUN2QyxJQUFJLE9BQU8sQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQztRQUM3QixPQUFPLE9BQU8sQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDOUIsQ0FBQztJQUNELE9BQU8sT0FBTyxDQUFDO0FBQ2pCLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvKiBlc2xpbnQtZGlzYWJsZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55ICovXG5pbXBvcnQgeyBsb2FkUmVtb3RlIH0gZnJvbSAnQG1vZHVsZS1mZWRlcmF0aW9uL2VuaGFuY2VkL3J1bnRpbWUnO1xuXG5leHBvcnQgdHlwZSBMb2FkUmVtb3RlTW9kdWxlT3B0aW9uczxUID0gYW55PiA9IHtcbiAgcmVtb3RlTmFtZTogc3RyaW5nO1xuICBleHBvc2VkTW9kdWxlOiBzdHJpbmc7XG4gIGZhbGxiYWNrPzogVDtcbn07XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBsb2FkUmVtb3RlTW9kdWxlPFQgPSBhbnk+KFxuICByZW1vdGVOYW1lOiBzdHJpbmcsXG4gIGV4cG9zZWRNb2R1bGU6IHN0cmluZ1xuKTogUHJvbWlzZTxUPjtcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBsb2FkUmVtb3RlTW9kdWxlPFQgPSBhbnk+KFxuICBvcHRpb25zOiBMb2FkUmVtb3RlTW9kdWxlT3B0aW9uc1xuKTogUHJvbWlzZTxUPjtcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBsb2FkUmVtb3RlTW9kdWxlPFQgPSBhbnk+KFxuICBvcHRpb25zT3JSZW1vdGVOYW1lOiBMb2FkUmVtb3RlTW9kdWxlT3B0aW9uczxUPiB8IHN0cmluZyxcbiAgZXhwb3NlZE1vZHVsZT86IHN0cmluZ1xuKTogUHJvbWlzZTxUPiB7XG4gIGNvbnN0IG9wdGlvbnMgPSBub3JtYWxpemUob3B0aW9uc09yUmVtb3RlTmFtZSwgZXhwb3NlZE1vZHVsZSk7XG5cbiAgY29uc3QgcmVtb3RlID0gb3B0aW9ucy5yZW1vdGVOYW1lO1xuICBjb25zdCBleHBvc2VkID0gbm9ybWFsaXplRXhwb3NlZChvcHRpb25zLmV4cG9zZWRNb2R1bGUpO1xuXG4gIGNvbnN0IHVybCA9IFtyZW1vdGUsIGV4cG9zZWRdLmpvaW4oJy8nKTtcblxuICBsZXQgcmVzdWx0OiBUIHwgbnVsbCA9IG51bGw7XG4gIGxldCBlcnJvcjogdW5rbm93bjtcblxuICB0cnkge1xuICAgIHJlc3VsdCA9IGF3YWl0IGxvYWRSZW1vdGU8VD4odXJsKTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIGVycm9yID0gZTtcbiAgfVxuXG4gIGlmICghZXJyb3IgJiYgcmVzdWx0KSB7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIGlmIChvcHRpb25zLmZhbGxiYWNrKSB7XG4gICAgcmV0dXJuIG9wdGlvbnMuZmFsbGJhY2s7XG4gIH1cblxuICBpZiAoZXJyb3IpIHtcbiAgICB0aHJvdyBlcnJvcjtcbiAgfVxuXG4gIHRocm93IG5ldyBFcnJvcignY291bGQgbm90IGxvYWQgJyArIHVybCk7XG59XG5cbmZ1bmN0aW9uIG5vcm1hbGl6ZTxUPihcbiAgb3B0aW9uc09yUmVtb3RlTmFtZTogTG9hZFJlbW90ZU1vZHVsZU9wdGlvbnM8VD4gfCBzdHJpbmcsXG4gIGV4cG9zZWRNb2R1bGU/OiBzdHJpbmdcbik6IExvYWRSZW1vdGVNb2R1bGVPcHRpb25zPFQ+IHtcbiAgaWYgKHR5cGVvZiBvcHRpb25zT3JSZW1vdGVOYW1lID09PSAnc3RyaW5nJykge1xuICAgIHJldHVybiB7XG4gICAgICByZW1vdGVOYW1lOiBvcHRpb25zT3JSZW1vdGVOYW1lLFxuICAgICAgZXhwb3NlZE1vZHVsZTogZXhwb3NlZE1vZHVsZSA/PyAnJyxcbiAgICB9O1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBvcHRpb25zT3JSZW1vdGVOYW1lO1xuICB9XG59XG5cbmZ1bmN0aW9uIG5vcm1hbGl6ZUV4cG9zZWQoZXhwb3NlZDogc3RyaW5nKTogc3RyaW5nIHtcbiAgaWYgKGV4cG9zZWQuc3RhcnRzV2l0aCgnLi8nKSkge1xuICAgIHJldHVybiBleHBvc2VkLnN1YnN0cmluZygyKTtcbiAgfVxuICByZXR1cm4gZXhwb3NlZDtcbn1cbiJdfQ==